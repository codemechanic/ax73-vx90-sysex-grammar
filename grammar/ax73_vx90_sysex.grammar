<?xml version="1.0" encoding="UTF-8"?>
<ufwb version="1.17">
    <grammar name="AX73 VX90 MIDI Sysex" start="id:70" author="Ben Allen" email="codemechanic@gmail.com" fileextension=".syx">
        <description>Grammar for the Akai AX73 and VX90 Synthesizer MIDI System Exclusive</description>
        <scripts>
            <script name="MIDI Data Byte" type="DataType" id="327">
                <source language="Python">
# MIDI Data Byte
#
# All bytes between the System Exclusive status byte and EOX (or the next status byte) must have zero in the top bit.
# MIDI Data Bytes range in value from 0 to 127.


def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	processedBytes = 0
	firstBit = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)

	if (firstBit == 0):

		result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)

		# return value to results
		value = Value()
		value.setString(str(result))
		results.addElement(element, 1, 0, value)
		processedBytes = 1

	return processedBytes


def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	# get number edited by user
	number = value.getUnsigned()

	# verbose flag
	verbose = False

	# verbose info
	if verbose:
		print(&quot;Input value: &quot; + str(number))
		print(&quot;byteArray length: &quot; + str(byteArray.getLength()))
		print(&quot;bitPos: &quot; + str(bitPos))
		print(&quot;bitLength: &quot; + str(bitLength))

		# number in binary
		numBinary = '{0:08b}'.format(number)
		print(&quot;Input value binary: &quot; + str(numBinary))

		# number in hex
		numHex = str.format('0x{:02X}', int(str(number), 16))
		print(&quot;Input value hex: &quot; + str(numHex))

	if (number &lt; 128):
		byteArray.writeUnsignedIntBits(number, bitPos, 8, ENDIAN_BIG)
	else:
		print(&quot;Input value out of range (0-127). Value not updated.&quot;)
                </source>
            </script>
            <script name="AX73 VX90 VCO Octave byte" type="DataType" id="336">
                <source language="Python">
# AX73 VX90 VCO Octave byte
#
# VCO Octave Labels 0-3

from enum import Enum
valueLabels = Enum('VCO Octave', '2\', 4\', 8\', 16\'', start=0)

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	processedBytes = 0
	initialBitLow = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)

	if (initialBitLow == 0):

			# read bits
			result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)

			# return value to results
			if (result &lt; len(valueLabels)):
				value = Value()
				value.setString(str(result) + &quot;: &quot; + str(valueLabels(result).name))
				results.addElement(element, 1, 0, value)
				processedBytes = 1
			else:
				print(&quot;Value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;)&quot;)

	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	# get number edited by user
	number = value.getUnsigned()

	if (number &lt; len(valueLabels)):
		byteArray.writeUnsignedIntBits(number, bitPos, 8, ENDIAN_BIG)
	else:
		print(&quot;Input value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;). Value not updated.&quot;)
</source>
            </script>
            <script name="AX73 VX90 VCO Waveform byte" type="DataType" id="337">
                <source language="Python">
# AX73 VX90 VCO Waveform byte
#
# VCO Waveform Labels 0-3

from enum import Enum
valueLabels = Enum('VCO Waveform', 'Saw, Triangle, Pulse, Saw+Triangle', start=0)

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	processedBytes = 0
	initialBitLow = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)

	if (initialBitLow == 0):

			# read bits
			result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)

			# return value to results
			if (result &lt; len(valueLabels)):
				value = Value()
				value.setString(str(result) + &quot;: &quot; + str(valueLabels(result).name))
				results.addElement(element, 1, 0, value)
				processedBytes = 1
			else:
				print(&quot;Value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;)&quot;)

	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	# get number edited by user
	number = value.getUnsigned()

	if (number &lt; len(valueLabels)):
		byteArray.writeUnsignedIntBits(number, bitPos, 8, ENDIAN_BIG)
	else:
		print(&quot;Input value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;). Value not updated.&quot;)
</source>
            </script>
            <script name="AX73 VX90 50 signed" type="DataType" id="340">
                <source language="Python">
# AX73 VX90 50 signed
#
# -50 to 50

maxNum = 50
minNum = -50

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	processedBytes = 0
	initialBitLow = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)

	if (initialBitLow == 0):

			# read bits
			result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)
			result = result - 50

			# return value to results
			if (result &gt;= minNum and result &lt;= maxNum):
				value = Value()
				value.setString(str(result))
				results.addElement(element, 1, 0, value)
				processedBytes = 1
			else:
				print(&quot;Value out of range (&quot; + str(minNum) + &quot;-&quot; + str(maxNum) + &quot;)&quot;)

	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	# get number edited by user
	number = value.getSigned()
	converted = number + 50

	if (number &gt;= minNum and number &lt;= maxNum):
		byteArray.writeUnsignedIntBits(converted, bitPos, 8, ENDIAN_BIG)
	else:
		print(&quot;Input value out of range (&quot; + str(minNum) + &quot;-&quot; + str(maxNum) + &quot;). Value not updated.&quot;)
</source>
            </script>
            <script name="AX73 VX90 100 unsigned" type="DataType" id="341">
                <source language="Python">
# AX73 VX90 100 unsigned
#
# 0 to 100

maxNum = 100

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	processedBytes = 0
	initialBitLow = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)

	if (initialBitLow == 0):

			# read bits
			result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)

			# return value to results
			if (result &lt;= maxNum):
				value = Value()
				value.setString(str(result))
				results.addElement(element, 1, 0, value)
				processedBytes = 1
			else:
				print(&quot;Value out of range (0-&quot; + str(maxNum) + &quot;)&quot;)

	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	# get number edited by user
	number = value.getUnsigned()

	if (number &lt;= maxNum):
		byteArray.writeUnsignedIntBits(number, bitPos, 8, ENDIAN_BIG)
	else:
		print(&quot;Input value out of range (0-&quot; + str(maxNum) + &quot;). Value not updated.&quot;)
</source>
            </script>
            <script name="test" type="DataType" id="344">
                <source language="Python"># custom data type script

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	# create and set new value
	value = Value()
	value.setString(&quot;Value of custom element&quot;)

	# how many bytes were processed?
	processedBytes = 0
	iteration = 0

	results.addElement(element, processedBytes, iteration, value)

	# return number of processed bytes
	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	# write an integer back to file
	# byteArray.writeUnsignedIntBits(highWord, bitPos, bitLength, ENDIAN_BIG)
</source>
            </script>
        </scripts>
        <structure name="Start of System Exclusive" id="71" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <number name="Byte" mustmatch="yes" id="72" type="integer" length="1" display="hex">
                <fixedvalues>
                    <fixedvalue name="SOX" value="0xF0"/>
                </fixedvalues>
            </number>
        </structure>
        <structure name="Single Byte ID" id="74" length="1" alignment="0" repeatmin="0" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <binary name="First bit" mustmatch="yes" id="75" length="1" lengthunit="bit">
                <fixedvalues>
                    <fixedvalue name="Zero" value="00"/>
                </fixedvalues>
            </binary>
            <number name="Manufacturer" id="76" type="integer" length="7" lengthunit="bit" display="hex">
                <fixedvalues>
                    <fixedvalue name="Sequential Circuits" value="0x1"/>
                    <fixedvalue name="Moog" value="0x4"/>
                    <fixedvalue name="Passport Designs" value="0x5"/>
                    <fixedvalue name="Lexicon" value="0x6"/>
                    <fixedvalue name="Kurzweil" value="0x7"/>
                    <fixedvalue name="Fender" value="0x8"/>
                    <fixedvalue name="AKG Acoustics" value="0xA"/>
                    <fixedvalue name="Ensoniq" value="0xF"/>
                    <fixedvalue name="Oberheim" value="0x10"/>
                    <fixedvalue name="Apple" value="0x11"/>
                    <fixedvalue name="Digidesign" value="0x13"/>
                    <fixedvalue name="Emu" value="0x18"/>
                    <fixedvalue name="ART" value="0x1A"/>
                    <fixedvalue name="Eventide" value="0x1C"/>
                    <fixedvalue name="Synthaxe" value="0x22"/>
                    <fixedvalue name="Hohner" value="0x24"/>
                    <fixedvalue name="PPG" value="0x29"/>
                    <fixedvalue name="SSL" value="0x2B"/>
                    <fixedvalue name="Hinton Instruments" value="0x2D"/>
                    <fixedvalue name="Elka / General Music" value="0x2F"/>
                    <fixedvalue name="Dynacord" value="0x30"/>
                    <fixedvalue name="Clavia (Nord)" value="0x33"/>
                    <fixedvalue name="Cheetah" value="0x36"/>
                    <fixedvalue name="Waldorf Electronics Gmbh" value="0x3E"/>
                    <fixedvalue name="Kawai" value="0x40"/>
                    <fixedvalue name="Roland" value="0x41"/>
                    <fixedvalue name="Korg" value="0x42"/>
                    <fixedvalue name="Yamaha" value="0x43"/>
                    <fixedvalue name="Casio" value="0x44"/>
                    <fixedvalue name="Akai" value="0x47"/>
                    <fixedvalue name="JVC" value="0x48"/>
                    <fixedvalue name="Sony" value="0x4C"/>
                    <fixedvalue name="Teac Corporation" value="0x4E"/>
                    <fixedvalue name="Fostex" value="0x51"/>
                    <fixedvalue name="Zoom" value="0x52"/>
                </fixedvalues>
            </number>
        </structure>
        <structure name="Multi Byte ID" id="78" length="3" alignment="0" repeatmin="0" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <number name="First Byte" mustmatch="yes" id="79" length="1" display="hex">
                <fixedvalues>
                    <fixedvalue name="Extended" value="0x0"/>
                </fixedvalues>
            </number>
            <number name="Manufacturer" id="80" type="integer" length="2" display="hex">
                <fixedvalues>
                    <fixedvalue name="Digital Music Corporation" value="0x7"/>
                    <fixedvalue name="New England Digital" value="0x9"/>
                    <fixedvalue name="Alesis" value="0xE"/>
                    <fixedvalue name="KAT" value="0x15"/>
                    <fixedvalue name="Opcode" value="0x16"/>
                    <fixedvalue name="Allen &amp; Heath Brenell" value="0x1A"/>
                    <fixedvalue name="Peavey Electronics" value="0x1B"/>
                    <fixedvalue name="360 Systems" value="0x1C"/>
                    <fixedvalue name="Zeta Systems" value="0x1F"/>
                    <fixedvalue name="Axxes" value="0x20"/>
                    <fixedvalue name="Mark Of The Unicorn (MOTU)" value="0x3B"/>
                    <fixedvalue name="Studio Electronics" value="0x4D"/>
                    <fixedvalue name="MIDI Solutions Inc" value="0x50"/>
                    <fixedvalue name="M-Audio (Midiman)" value="0x105"/>
                    <fixedvalue name="PreSonus" value="0x106"/>
                    <fixedvalue name="Radikal Technologies" value="0x136"/>
                    <fixedvalue name="Roger Linn Design" value="0x137"/>
                    <fixedvalue name="Plogue Art et Technologie" value="0x15A"/>
                    <fixedvalue name="Livid" value="0x161"/>
                    <fixedvalue name="Source Audio LLC" value="0x16C"/>
                    <fixedvalue name="Kilpatrick Audio" value="0x172"/>
                    <fixedvalue name="iConnectivity" value="0x173"/>
                    <fixedvalue name="Intellijel Designs Inc" value="0x214"/>
                    <fixedvalue name="Sensel Inc" value="0x21D"/>
                    <fixedvalue name="Electro-Harmonix" value="0x226"/>
                    <fixedvalue name="Forefront Technology" value="0x2011"/>
                    <fixedvalue name="Kenton Electronics" value="0x2013"/>
                    <fixedvalue name="TC Electronic" value="0x201F"/>
                    <fixedvalue name="Doepfer" value="0x2020"/>
                    <fixedvalue name="Acorn Computer" value="0x2027"/>
                    <fixedvalue name="Focusrite / Novation" value="0x2029"/>
                    <fixedvalue name="Behringer" value="0x2032"/>
                    <fixedvalue name="Access Music Electronics" value="0x2033"/>
                    <fixedvalue name="Elektron" value="0x203C"/>
                    <fixedvalue name="Vermona" value="0x204D"/>
                    <fixedvalue name="Analogue Systems" value="0x2052"/>
                    <fixedvalue name="genoQs Machines GmbH" value="0x2064"/>
                    <fixedvalue name="Elby Designs" value="0x2069"/>
                    <fixedvalue name="Arturia" value="0x206B"/>
                    <fixedvalue name="C-Thru Music" value="0x206D"/>
                    <fixedvalue name="OTO Machines" value="0x2070"/>
                    <fixedvalue name="Teenage Engineering" value="0x2076"/>
                    <fixedvalue name="Mutable Instruments" value="0x2102"/>
                    <fixedvalue name="PreSonus Software Ltd" value="0x2103"/>
                    <fixedvalue name="Modal Electronics" value="0x2107"/>
                    <fixedvalue name="Native Instruments" value="0x2109"/>
                    <fixedvalue name="ROLI Ltd" value="0x2110"/>
                    <fixedvalue name="Rob Papen" value="0x2117"/>
                    <fixedvalue name="IK Multimedia" value="0x211A"/>
                    <fixedvalue name="Modor Music" value="0x211C"/>
                    <fixedvalue name="Ableton" value="0x211D"/>
                    <fixedvalue name="Retrokits" value="0x2123"/>
                    <fixedvalue name="Expressive E" value="0x2126"/>
                    <fixedvalue name="Expert Sleepers" value="0x2127"/>
                    <fixedvalue name="Sonic Potions" value="0x212A"/>
                    <fixedvalue name="Dreadbox P.C." value="0x2135"/>
                    <fixedvalue name="ALM Co (Busy Circuits)" value="0x2138"/>
                    <fixedvalue name="Bitwig GmbH" value="0x2149"/>
                </fixedvalues>
            </number>
        </structure>
        <structure name="Identification Code" id="82" length="0" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <scriptelement name="mapID" id="83">
                <script name="unnamed" type="Generic">
                    <source language="Python">
currentGrammar = currentMapper.getCurrentGrammar()
multiByteID = currentGrammar.getStructureByName(&quot;Multi Byte ID&quot;)
singleByteID = currentGrammar.getStructureByName(&quot;Single Byte ID&quot;)

currentPos = currentMapper.getCurrentOffset()
byteView = currentMapper.getCurrentByteView()
byte = byteView.readByte(currentPos)

if (byte == 0x00):
	currentMapper.mapStructure(multiByteID)
	debugLog(&quot;Multi Byte ID mapped at offset &quot; + str(currentPos))
else:
	currentMapper.mapStructure(singleByteID)
	debugLog(&quot;Single Byte ID mapped at offset &quot; + str(currentPos))
                    </source>
                </script>
            </scriptelement>
        </structure>
        <structure name="Voice Program" id="85" length="52" repeatmin="100" repeatmax="100" encoding="ANSI_X3.4-1968" endian="big" signed="no">
            <structure name="Oscillator" id="86" length="8" alignment="0" fillcolor="688473">
                <custom name="VCO Octave (E00)" id="338" script="id:336"/>
                <custom name="VCO Waveform (E01)" id="339" script="id:337"/>
                <custom name="VCO Pulse Width (E02)" id="89" script="id:327"/>
                <custom name="VCO Pulse Width Mod Speed (E03)" id="90" script="id:327"/>
                <custom name="VCO Envelope Generator (E04)" id="91" script="id:327"/>
                <custom name="Noise (E05)" id="92" script="id:327"/>
                <custom name="Sampler (E06)" id="93" script="id:327"/>
                <custom name="Balance (E07)" id="94" script="id:327"/>
            </structure>
            <structure name="Filter" id="96" length="7" alignment="0" fillcolor="879E81">
                <custom name="VCF Frequency (E10)" id="97" script="id:327"/>
                <custom name="VCF Resonance (E11)" id="98" script="id:327"/>
                <custom name="VCF Osc Mod (E12)" id="99" script="id:327"/>
                <custom name="VCF Envelope Polarity (E13)" id="342" script="id:340"/>
                <custom name="VCF Key Follow (E14)" id="101" script="id:327"/>
                <custom name="VCF Velocity (E15)" id="102" script="id:327"/>
                <custom name="High Pass Filter (E16)" id="103" script="id:327"/>
            </structure>
            <structure name="Envelope" id="105" length="9" alignment="0" fillcolor="B9C6A7">
                <custom name="Envelope Mode (E20)" id="106" script="id:327"/>
                <custom name="EGA Attack (E21)" id="107" script="id:327"/>
                <custom name="EGA Decay (E22)" id="108" script="id:327"/>
                <custom name="EGA Sustain (E23)" id="109" script="id:327"/>
                <custom name="EGA Release (E24)" id="110" script="id:327"/>
                <custom name="EGO Attack (E25)" id="111" script="id:327"/>
                <custom name="EGO Decay (E26)" id="112" script="id:327"/>
                <custom name="EGO Sustain (E27)" id="113" script="id:327"/>
                <custom name="EGO Release (E28)" id="114" script="id:327"/>
            </structure>
            <structure name="Attenuator" id="116" length="2" alignment="0" fillcolor="E4E4CB">
                <custom name="VCA Level (E30)" id="117" script="id:327"/>
                <custom name="VCA Velocity (E31)" id="118" script="id:327"/>
            </structure>
            <structure name="Low Frequency Oscillator" id="120" length="5" alignment="0" fillcolor="F2F3F2">
                <custom name="LFO Select (E40)" id="121" script="id:327"/>
                <custom name="LFO Waveform (E41)" id="122" script="id:327"/>
                <custom name="LFO Frequency (E42)" id="123" script="id:327"/>
                <custom name="LFO Depth (E43)" id="124" script="id:327"/>
                <custom name="LFO Delay (E44)" id="125" script="id:327"/>
            </structure>
            <structure name="Misc" id="127" length="9" alignment="0">
                <custom name="Chorus (E45)" id="128" script="id:327"/>
                <custom name="Voice Assign (E50)" id="129" script="id:327"/>
                <custom name="Portamento (E51)" id="130" script="id:327"/>
                <custom name="Voice Detune (E52)" id="131" script="id:327"/>
                <custom name="Wheel Bend VCO (E60)" id="132" script="id:327"/>
                <custom name="Wheel Bend VCF (E61)" id="133" script="id:327"/>
                <custom name="Wheel Mod (E62)" id="134" script="id:327"/>
                <custom name="MIDI Split (E70)" id="135" script="id:327"/>
                <custom name="MIDI Split Point (E71)" id="136" script="id:327"/>
            </structure>
            <string name="Label (E80)" id="138" fillcolor="EC8140" type="fixed-length" length="12"/>
        </structure>
        <structure name="Device ID" id="140" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <number name="Device" id="141" type="integer" length="1" display="hex">
                <fixedvalues>
                    <fixedvalue name="all devices" value="0x7F"/>
                </fixedvalues>
            </number>
        </structure>
        <structure name="Product ID" id="143" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <number name="Product" id="144" type="integer" length="1" display="hex"/>
        </structure>
        <structure name="Voice Program Data" id="146" length="0" alignment="0" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <structref name="Voice Program" id="147" repeatmax="100" structure="id:85"/>
        </structure>
        <structure name="End of System Exclusive" id="149" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <number name="Byte" mustmatch="yes" id="150" type="integer" length="1" display="hex">
                <fixedvalues>
                    <fixedvalue name="EOX" value="0xF7"/>
                </fixedvalues>
            </number>
        </structure>
        <structure name="Chunk" id="152" repeatmax="-1" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <structref name="Start of System Exclusive" id="153" structure="id:71"/>
            <structref name="Identification Code" id="154" structure="id:82"/>
            <structref name="Device ID" id="155" structure="id:140"/>
            <structref name="Product ID" id="156" structure="id:143"/>
            <structref name="Voice Program Data" id="157" structure="id:146"/>
            <structref name="End of System Exclusive" id="158" structure="id:149"/>
        </structure>
        <structure name="MIDI System Exclusive" id="70" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <structref name="Chunk" id="160" repeatmax="-1" structure="id:152"/>
        </structure>
    </grammar>
</ufwb>
