<?xml version="1.0" encoding="UTF-8"?>
<ufwb version="1.17">
    <grammar name="AX73 VX90 MIDI Sysex" start="id:6" author="Ben Allen" email="codemechanic@gmail.com" fileextension=".syx">
        <description>Grammar for the Akai AX73 and VX90 Synthesizer MIDI System Exclusive</description>
        <scripts>
            <script name="2 EG Select byte&#10;#&#10;# 2 values 0-1&#10;&#10;from enum import Enum&#10;valueLabels = Enum('Filter uses', 'EGA, EGO', start=0)&#10;&#10;def parseByteRange(element, byteView, bitPos, bitLength, results):&#10;&#9;# this method parses data starting at bitPos, bitLength bits are remaining&#10;&#9;&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;&#10;&#10;&#9;processedBytes = 0&#10;&#9;initialBitLow = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)&#10;&#10;&#9;if (initialBitLow == 0):&#10;&#10;&#9;&#9;&#9;# read bits&#10;&#9;&#9;&#9;result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)&#10;&#10;&#9;&#9;&#9;# return value to results&#10;&#9;&#9;&#9;if (result &lt; len(valueLabels)):&#10;&#9;&#9;&#9;&#9;value = Value()&#10;&#9;&#9;&#9;&#9;value.setString(str(result) + &quot;: &quot; + str(valueLabels(result).name))&#10;&#9;&#9;&#9;&#9;results.addElement(element, 1, 0, value)&#10;&#9;&#9;&#9;&#9;processedBytes = 1&#10;&#9;&#9;&#9;else:&#10;&#9;&#9;&#9;&#9;print(&quot;Value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;)&quot;)&#10;&#10;&#9;return processedBytes&#10;&#10;def fillByteRange(value, byteArray, bitPos, bitLength):&#10;&#9;# this method translates edited values back to the file&#10;&#9;&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;&#10;&#10;&#9;bytePos = bitPos/8&#10;&#10;&#9;# get number edited by user&#10;&#9;number = value.getUnsigned()&#10;&#10;&#9;if (number &lt; len(valueLabels)):&#10;&#9;&#9;byteArray.replaceByte(bytePos, number)&#10;&#9;else:&#10;&#9;&#9;print(&quot;Input value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;). Value not updated.&quot;)&#10;# AX73 VX90 EG Select byte&#10;#&#10;# 2 values 0-1&#10;&#10;from enum import Enum&#10;valueLabels = Enum('Filter uses', 'EGA, EGO', start=0)&#10;&#10;def parseByteRange(element, byteView, bitPos, bitLength, results):&#10;&#9;# this method parses data starting at bitPos, bitLength bits are remaining&#10;&#9;&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;&#10;&#10;&#9;processedBytes = 0&#10;&#9;initialBitLow = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)&#10;&#10;&#9;if (initialBitLow == 0):&#10;&#10;&#9;&#9;&#9;# read bits&#10;&#9;&#9;&#9;result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)&#10;&#10;&#9;&#9;&#9;# return value to results&#10;&#9;&#9;&#9;if (result &lt; len(valueLabels)):&#10;&#9;&#9;&#9;&#9;value = Value()&#10;&#9;&#9;&#9;&#9;value.setString(str(result) + &quot;: &quot; + str(valueLabels(result).name))&#10;&#9;&#9;&#9;&#9;results.addElement(element, 1, 0, value)&#10;&#9;&#9;&#9;&#9;processedBytes = 1&#10;&#9;&#9;&#9;else:&#10;&#9;&#9;&#9;&#9;print(&quot;Value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;)&quot;)&#10;&#10;&#9;return processedBytes&#10;&#10;def fillByteRange(value, byteArray, bitPos, bitLength):&#10;&#9;# this method translates edited values back to the file&#10;&#9;&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;&#10;&#10;&#9;bytePos = bitPos/8&#10;&#10;&#9;# get number edited by user&#10;&#9;number = value.getUnsigned()&#10;&#10;&#9;if (number &lt; len(valueLabels)):&#10;&#9;&#9;byteArray.replaceByte(bytePos, number)&#10;&#9;else:&#10;&#9;&#9;print(&quot;Input value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;). Value not updated.&quot;)&#10;2 EG Select byte" type="DataType" id="275">
                <source language="Python"># AX73 VX90 EG Select byte
#
# 2 values 0-1

from enum import Enum
valueLabels = Enum('Filter uses', 'EGA, EGO', start=0)

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	processedBytes = 0
	initialBitLow = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)

	if (initialBitLow == 0):

			# read bits
			result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)

			# return value to results
			if (result &lt; len(valueLabels)):
				value = Value()
				value.setString(str(result) + &quot;: &quot; + str(valueLabels(result).name))
				results.addElement(element, 1, 0, value)
				processedBytes = 1
			else:
				print(&quot;Value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;)&quot;)

	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	bytePos = bitPos/8

	# get number edited by user
	number = value.getUnsigned()

	if (number &lt; len(valueLabels)):
		byteArray.replaceByte(bytePos, number)
	else:
		print(&quot;Input value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;). Value not updated.&quot;)
</source>
            </script>
            <script name="2 Noise byte" type="DataType" id="276">
                <source language="Python"># AX73 VX90 Noise on/off byte
#
# 2 values 0-1

from enum import Enum
valueLabels = Enum('Noise', 'on, off', start=0)

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	processedBytes = 0
	initialBitLow = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)

	if (initialBitLow == 0):

			# read bits
			result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)

			# return value to results
			if (result &lt; len(valueLabels)):
				value = Value()
				value.setString(str(result) + &quot;: &quot; + str(valueLabels(result).name))
				results.addElement(element, 1, 0, value)
				processedBytes = 1
			else:
				print(&quot;Value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;)&quot;)

	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	bytePos = bitPos/8

	# get number edited by user
	number = value.getUnsigned()

	if (number &lt; len(valueLabels)):
		byteArray.replaceByte(bytePos, number)
	else:
		print(&quot;Input value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;). Value not updated.&quot;)
</source>
            </script>
            <script name="2 Sampler byte" type="DataType" id="277">
                <source language="Python"># AX73 VX90 Sampler on/off byte
#
# 2 values 0-1

from enum import Enum
valueLabels = Enum('Sampler', 'on, off', start=0)

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	processedBytes = 0
	initialBitLow = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)

	if (initialBitLow == 0):

			# read bits
			result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)

			# return value to results
			if (result &lt; len(valueLabels)):
				value = Value()
				value.setString(str(result) + &quot;: &quot; + str(valueLabels(result).name))
				results.addElement(element, 1, 0, value)
				processedBytes = 1
			else:
				print(&quot;Value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;)&quot;)

	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	bytePos = bitPos/8

	# get number edited by user
	number = value.getUnsigned()

	if (number &lt; len(valueLabels)):
		byteArray.replaceByte(bytePos, number)
	else:
		print(&quot;Input value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;). Value not updated.&quot;)
</source>
            </script>
            <script name="3 Assign byte" type="DataType" id="278">
                <source language="Python"># AX73 VX90 Assign byte
#
# 3 values 0-2

from enum import Enum
valueLabels = Enum('Assign', 'Poly, Dual, Unison', start=0)

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	processedBytes = 0
	initialBitLow = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)

	if (initialBitLow == 0):

			# read bits
			result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)

			# return value to results
			if (result &lt; len(valueLabels)):
				value = Value()
				value.setString(str(result) + &quot;: &quot; + str(valueLabels(result).name))
				results.addElement(element, 1, 0, value)
				processedBytes = 1
			else:
				print(&quot;Value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;)&quot;)

	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	bytePos = bitPos/8

	# get number edited by user
	number = value.getUnsigned()

	if (number &lt; len(valueLabels)):
		byteArray.replaceByte(bytePos, number)
	else:
		print(&quot;Input value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;). Value not updated.&quot;)
</source>
            </script>
            <script name="3 Chorus byte" type="DataType" id="279">
                <source language="Python"># AX73 VX90 Chorus byte
#
# 3 values 0-2

from enum import Enum
valueLabels = Enum('Chorus', 'off, Mode 1, Mode 2', start=0)

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	processedBytes = 0
	initialBitLow = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)

	if (initialBitLow == 0):

			# read bits
			result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)

			# return value to results
			if (result &lt; len(valueLabels)):
				value = Value()
				value.setString(str(result) + &quot;: &quot; + str(valueLabels(result).name))
				results.addElement(element, 1, 0, value)
				processedBytes = 1
			else:
				print(&quot;Value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;)&quot;)

	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	bytePos = bitPos/8

	# get number edited by user
	number = value.getUnsigned()

	if (number &lt; len(valueLabels)):
		byteArray.replaceByte(bytePos, number)
	else:
		print(&quot;Input value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;). Value not updated.&quot;)
</source>
            </script>
            <script name="3 MIDI Split Point byte" type="DataType" id="280">
                <source language="Python"># AX73 VX90 Midi Split Point byte
#
# 3 values 0-2

from enum import Enum
valueLabels = Enum('Midi Split Point', 'off, upper, lower', start=0)

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	processedBytes = 0
	initialBitLow = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)

	if (initialBitLow == 0):

			# read bits
			result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)

			# return value to results
			if (result &lt; len(valueLabels)):
				value = Value()
				value.setString(str(result) + &quot;: &quot; + str(valueLabels(result).name))
				results.addElement(element, 1, 0, value)
				processedBytes = 1
			else:
				print(&quot;Value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;)&quot;)

	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	bytePos = bitPos/8

	# get number edited by user
	number = value.getUnsigned()

	if (number &lt; len(valueLabels)):
		byteArray.replaceByte(bytePos, number)
	else:
		print(&quot;Input value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;). Value not updated.&quot;)
</source>
            </script>
            <script name="4 LFO Destination byte" type="DataType" id="281">
                <source language="Python"># AX73 VX90 LFO Destination byte
#
# LFO Destination Labels 0-3

from enum import Enum
valueLabels = Enum('LFO Destination', 'off, VCO, VCF, VCA', start=0)

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	processedBytes = 0
	initialBitLow = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)

	if (initialBitLow == 0):

			# read bits
			result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)

			# return value to results
			if (result &lt; len(valueLabels)):
				value = Value()
				value.setString(str(result) + &quot;: &quot; + str(valueLabels(result).name))
				results.addElement(element, 1, 0, value)
				processedBytes = 1
			else:
				print(&quot;Value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;)&quot;)

	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	bytePos = bitPos/8

	# get number edited by user
	number = value.getUnsigned()

	if (number &lt; len(valueLabels)):
		byteArray.replaceByte(bytePos, number)
	else:
		print(&quot;Input value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;). Value not updated.&quot;)
</source>
            </script>
            <script name="4 VCO Octave byte" type="DataType" id="336">
                <source language="Python"># AX73 VX90 VCO Octave byte
#
# VCO Octave Labels 0-3

from enum import Enum
valueLabels = Enum('VCO Octave', '2\', 4\', 8\', 16\'', start=0)

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	processedBytes = 0
	initialBitLow = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)

	if (initialBitLow == 0):

			# read bits
			result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)

			# return value to results
			if (result &lt; len(valueLabels)):
				value = Value()
				value.setString(str(result) + &quot;: &quot; + str(valueLabels(result).name))
				results.addElement(element, 1, 0, value)
				processedBytes = 1
			else:
				print(&quot;Value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;)&quot;)

	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	bytePos = bitPos/8

	# get number edited by user
	number = value.getUnsigned()

	if (number &lt; len(valueLabels)):
		byteArray.replaceByte(bytePos, number)
	else:
		print(&quot;Input value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;). Value not updated.&quot;)
</source>
            </script>
            <script name="4 VCO Waveform byte" type="DataType" id="337">
                <source language="Python"># AX73 VX90 VCO Waveform byte
#
# VCO Waveform Labels 0-3

from enum import Enum
valueLabels = Enum('VCO Waveform', 'Saw, Triangle, Pulse, Saw+Triangle', start=0)

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	processedBytes = 0
	initialBitLow = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)

	if (initialBitLow == 0):

			# read bits
			result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)

			# return value to results
			if (result &lt; len(valueLabels)):
				value = Value()
				value.setString(str(result) + &quot;: &quot; + str(valueLabels(result).name))
				results.addElement(element, 1, 0, value)
				processedBytes = 1
			else:
				print(&quot;Value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;)&quot;)

	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	bytePos = bitPos/8

	# get number edited by user
	number = value.getUnsigned()

	if (number &lt; len(valueLabels)):
		byteArray.replaceByte(bytePos, number)
	else:
		print(&quot;Input value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;). Value not updated.&quot;)
</source>
            </script>
            <script name="5 LFO Waveform byte" type="DataType" id="282">
                <source language="Python"># AX73 VX90 LFO Waveform byte
#
# LFO Waveform Labels 0-4

from enum import Enum
valueLabels = Enum('LFO Waveform', 'DnSaw, UpSaw, Triangle, Square, Random', start=0)

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	processedBytes = 0
	initialBitLow = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)

	if (initialBitLow == 0):

			# read bits
			result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)

			# return value to results
			if (result &lt; len(valueLabels)):
				value = Value()
				value.setString(str(result) + &quot;: &quot; + str(valueLabels(result).name))
				results.addElement(element, 1, 0, value)
				processedBytes = 1
			else:
				print(&quot;Value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;)&quot;)

	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	bytePos = bitPos/8

	# get number edited by user
	number = value.getUnsigned()

	if (number &lt; len(valueLabels)):
		byteArray.replaceByte(bytePos, number)
	else:
		print(&quot;Input value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;). Value not updated.&quot;)
</source>
            </script>
            <script name="13 Wheel Bend VCO range byte" type="DataType" id="283">
                <source language="Python"># AX73 VX90 Wheel Bend VCO range byte
#
# 13 values 0-12

from enum import Enum
valueLabels = Enum('Range ±', '0, 1 semitone, 2 semitones, 3 semitones, 4 semitones, 5 semitones, 6 semitones, 7 semitones, 8 semitones, 9 semitones, 10 semitones, 11 semitones, 1 octave', start=0)

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	processedBytes = 0
	initialBitLow = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)

	if (initialBitLow == 0):

			# read bits
			result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)

			# return value to results
			if (result &lt; len(valueLabels)):
				value = Value()
				value.setString(str(result) + &quot;: &quot; + str(valueLabels(result).name))
				results.addElement(element, 1, 0, value)
				processedBytes = 1
			else:
				print(&quot;Value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;)&quot;)

	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	bytePos = bitPos/8

	# get number edited by user
	number = value.getUnsigned()

	if (number &lt; len(valueLabels)):
		byteArray.replaceByte(bytePos, number)
	else:
		print(&quot;Input value out of range (0-&quot; + str(len(valueLabels)-1) + &quot;). Value not updated.&quot;)
</source>
            </script>
            <script name="50 Signed byte" type="DataType" id="340">
                <source language="Python"># AX73 VX90 50 Signed byte
#
# -50 to 50

maxNum = 50
minNum = -50

def toSignedInt(number, modifier):
	number = int(number) - int(modifier)
	return number

def toUnsignedInt(number, modifier):
	number = int(number) + int(modifier)
	return number

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	processedBytes = 0
	initialBitLow = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)

	if (initialBitLow == 0):

			# read bits
			result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)
			result = toSignedInt(result, 50)

			# return value to results
			if (result &gt;= minNum and result &lt;= maxNum):
				value = Value()
				value.setString(str(result))
				results.addElement(element, 1, 0, value)
				processedBytes = 1
			else:
				print(&quot;Value out of range (&quot; + str(minNum) + &quot;-&quot; + str(maxNum) + &quot;)&quot;)

	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	bytePos = bitPos/8

	number = value.getString()
	converted = toUnsignedInt(number, 50)

	if (abs(int(number)) &lt;= maxNum):
		byteArray.writeUnsignedInt(converted, bytePos, 1, ENDIAN_BIG)
	else:
		print(&quot;Input value out of range (&quot; + str(minNum) + &quot;-&quot; + str(maxNum) + &quot;). Value not updated.&quot;)
</source>
            </script>
            <script name="100 Unsigned byte" type="DataType" id="341">
                <source language="Python"># AX73 VX90 100 Unsigned byte
#
# 0 to 100

maxNum = 100

def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	processedBytes = 0
	initialBitLow = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)

	if (initialBitLow == 0):

			# read bits
			result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)

			# return value to results
			if (result &lt;= maxNum):
				value = Value()
				value.setString(str(result))
				results.addElement(element, 1, 0, value)
				processedBytes = 1
			else:
				print(&quot;Value out of range (0-&quot; + str(maxNum) + &quot;)&quot;)

	return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	bytePos = bitPos/8

	# get number edited by user
	number = value.getUnsigned()

	if (number &lt;= maxNum):
		byteArray.replaceByte(bytePos, number)
	else:
		print(&quot;Input value out of range (0-&quot; + str(maxNum) + &quot;). Value not updated.&quot;)
</source>
            </script>
            <script name="MIDI Data byte" type="DataType" id="327">
                <source language="Python"># MIDI Data Byte
#
# All bytes between the System Exclusive status byte and EOX (or the next status byte) must have zero in the top bit.
# MIDI Data Bytes range in value from 0 to 127.


def parseByteRange(element, byteView, bitPos, bitLength, results):
	# this method parses data starting at bitPos, bitLength bits are remaining
	&quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

	processedBytes = 0
	firstBit = byteView.readUnsignedIntBits(bitPos, 1, ENDIAN_BIG)

	if (firstBit == 0):

		result = byteView.readUnsignedIntBits(bitPos+1, 7, ENDIAN_BIG)

		# return value to results
		value = Value()
		value.setString(str(result))
		results.addElement(element, 1, 0, value)
		processedBytes = 1

	return processedBytes


def fillByteRange(value, byteArray, bitPos, bitLength):
	# this method translates edited values back to the file
	&quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

	# get number edited by user
	number = value.getUnsigned()

	# verbose flag
	verbose = False

	# verbose info
	if verbose:
		print(&quot;Input value: &quot; + str(number))
		print(&quot;byteArray length: &quot; + str(byteArray.getLength()))
		print(&quot;bitPos: &quot; + str(bitPos))
		print(&quot;bitLength: &quot; + str(bitLength))

		# number in binary
		numBinary = '{0:08b}'.format(number)
		print(&quot;Input value binary: &quot; + str(numBinary))

		# number in hex
		numHex = str.format('0x{:02X}', int(str(number), 16))
		print(&quot;Input value hex: &quot; + str(numHex))

	if (number &lt; 128):
		byteArray.writeUnsignedIntBits(number, bitPos, 8, ENDIAN_BIG)
	else:
		print(&quot;Input value out of range (0-127). Value not updated.&quot;)
                </source>
            </script>
        </scripts>
        <structure name="Start of System Exclusive" id="7" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <number name="Byte" mustmatch="yes" id="8" type="integer" length="1" display="hex">
                <fixedvalues>
                    <fixedvalue name="SOX" value="0xF0"/>
                </fixedvalues>
            </number>
        </structure>
        <structure name="Single Byte ID" id="10" length="1" alignment="0" repeatmin="0" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <binary name="First bit" mustmatch="yes" id="11" length="1" lengthunit="bit">
                <fixedvalues>
                    <fixedvalue name="Zero" value="00"/>
                </fixedvalues>
            </binary>
            <number name="Manufacturer" id="12" type="integer" length="7" lengthunit="bit" display="hex">
                <fixedvalues>
                    <fixedvalue name="Sequential Circuits" value="0x1"/>
                    <fixedvalue name="Moog" value="0x4"/>
                    <fixedvalue name="Passport Designs" value="0x5"/>
                    <fixedvalue name="Lexicon" value="0x6"/>
                    <fixedvalue name="Kurzweil" value="0x7"/>
                    <fixedvalue name="Fender" value="0x8"/>
                    <fixedvalue name="AKG Acoustics" value="0xA"/>
                    <fixedvalue name="Ensoniq" value="0xF"/>
                    <fixedvalue name="Oberheim" value="0x10"/>
                    <fixedvalue name="Apple" value="0x11"/>
                    <fixedvalue name="Digidesign" value="0x13"/>
                    <fixedvalue name="Emu" value="0x18"/>
                    <fixedvalue name="ART" value="0x1A"/>
                    <fixedvalue name="Eventide" value="0x1C"/>
                    <fixedvalue name="Synthaxe" value="0x22"/>
                    <fixedvalue name="Hohner" value="0x24"/>
                    <fixedvalue name="PPG" value="0x29"/>
                    <fixedvalue name="SSL" value="0x2B"/>
                    <fixedvalue name="Hinton Instruments" value="0x2D"/>
                    <fixedvalue name="Elka / General Music" value="0x2F"/>
                    <fixedvalue name="Dynacord" value="0x30"/>
                    <fixedvalue name="Clavia (Nord)" value="0x33"/>
                    <fixedvalue name="Cheetah" value="0x36"/>
                    <fixedvalue name="Waldorf Electronics Gmbh" value="0x3E"/>
                    <fixedvalue name="Kawai" value="0x40"/>
                    <fixedvalue name="Roland" value="0x41"/>
                    <fixedvalue name="Korg" value="0x42"/>
                    <fixedvalue name="Yamaha" value="0x43"/>
                    <fixedvalue name="Casio" value="0x44"/>
                    <fixedvalue name="Akai" value="0x47"/>
                    <fixedvalue name="JVC" value="0x48"/>
                    <fixedvalue name="Sony" value="0x4C"/>
                    <fixedvalue name="Teac Corporation" value="0x4E"/>
                    <fixedvalue name="Fostex" value="0x51"/>
                    <fixedvalue name="Zoom" value="0x52"/>
                </fixedvalues>
            </number>
        </structure>
        <structure name="Multi Byte ID" id="14" length="3" alignment="0" repeatmin="0" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <number name="First Byte" mustmatch="yes" id="15" length="1" display="hex">
                <fixedvalues>
                    <fixedvalue name="Extended" value="0x0"/>
                </fixedvalues>
            </number>
            <number name="Manufacturer" id="16" type="integer" length="2" display="hex">
                <fixedvalues>
                    <fixedvalue name="Digital Music Corporation" value="0x7"/>
                    <fixedvalue name="New England Digital" value="0x9"/>
                    <fixedvalue name="Alesis" value="0xE"/>
                    <fixedvalue name="KAT" value="0x15"/>
                    <fixedvalue name="Opcode" value="0x16"/>
                    <fixedvalue name="Allen &amp; Heath Brenell" value="0x1A"/>
                    <fixedvalue name="Peavey Electronics" value="0x1B"/>
                    <fixedvalue name="360 Systems" value="0x1C"/>
                    <fixedvalue name="Zeta Systems" value="0x1F"/>
                    <fixedvalue name="Axxes" value="0x20"/>
                    <fixedvalue name="Mark Of The Unicorn (MOTU)" value="0x3B"/>
                    <fixedvalue name="Studio Electronics" value="0x4D"/>
                    <fixedvalue name="MIDI Solutions Inc" value="0x50"/>
                    <fixedvalue name="M-Audio (Midiman)" value="0x105"/>
                    <fixedvalue name="PreSonus" value="0x106"/>
                    <fixedvalue name="Radikal Technologies" value="0x136"/>
                    <fixedvalue name="Roger Linn Design" value="0x137"/>
                    <fixedvalue name="Plogue Art et Technologie" value="0x15A"/>
                    <fixedvalue name="Livid" value="0x161"/>
                    <fixedvalue name="Source Audio LLC" value="0x16C"/>
                    <fixedvalue name="Kilpatrick Audio" value="0x172"/>
                    <fixedvalue name="iConnectivity" value="0x173"/>
                    <fixedvalue name="Intellijel Designs Inc" value="0x214"/>
                    <fixedvalue name="Sensel Inc" value="0x21D"/>
                    <fixedvalue name="Electro-Harmonix" value="0x226"/>
                    <fixedvalue name="Forefront Technology" value="0x2011"/>
                    <fixedvalue name="Kenton Electronics" value="0x2013"/>
                    <fixedvalue name="TC Electronic" value="0x201F"/>
                    <fixedvalue name="Doepfer" value="0x2020"/>
                    <fixedvalue name="Acorn Computer" value="0x2027"/>
                    <fixedvalue name="Focusrite / Novation" value="0x2029"/>
                    <fixedvalue name="Behringer" value="0x2032"/>
                    <fixedvalue name="Access Music Electronics" value="0x2033"/>
                    <fixedvalue name="Elektron" value="0x203C"/>
                    <fixedvalue name="Vermona" value="0x204D"/>
                    <fixedvalue name="Analogue Systems" value="0x2052"/>
                    <fixedvalue name="genoQs Machines GmbH" value="0x2064"/>
                    <fixedvalue name="Elby Designs" value="0x2069"/>
                    <fixedvalue name="Arturia" value="0x206B"/>
                    <fixedvalue name="C-Thru Music" value="0x206D"/>
                    <fixedvalue name="OTO Machines" value="0x2070"/>
                    <fixedvalue name="Teenage Engineering" value="0x2076"/>
                    <fixedvalue name="Mutable Instruments" value="0x2102"/>
                    <fixedvalue name="PreSonus Software Ltd" value="0x2103"/>
                    <fixedvalue name="Modal Electronics" value="0x2107"/>
                    <fixedvalue name="Native Instruments" value="0x2109"/>
                    <fixedvalue name="ROLI Ltd" value="0x2110"/>
                    <fixedvalue name="Rob Papen" value="0x2117"/>
                    <fixedvalue name="IK Multimedia" value="0x211A"/>
                    <fixedvalue name="Modor Music" value="0x211C"/>
                    <fixedvalue name="Ableton" value="0x211D"/>
                    <fixedvalue name="Retrokits" value="0x2123"/>
                    <fixedvalue name="Expressive E" value="0x2126"/>
                    <fixedvalue name="Expert Sleepers" value="0x2127"/>
                    <fixedvalue name="Sonic Potions" value="0x212A"/>
                    <fixedvalue name="Dreadbox P.C." value="0x2135"/>
                    <fixedvalue name="ALM Co (Busy Circuits)" value="0x2138"/>
                    <fixedvalue name="Bitwig GmbH" value="0x2149"/>
                </fixedvalues>
            </number>
        </structure>
        <structure name="Identification Code" id="18" length="0" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <scriptelement name="mapID" id="19">
                <script name="unnamed" type="Generic">
                    <source language="Python">
currentGrammar = currentMapper.getCurrentGrammar()
multiByteID = currentGrammar.getStructureByName(&quot;Multi Byte ID&quot;)
singleByteID = currentGrammar.getStructureByName(&quot;Single Byte ID&quot;)

currentPos = currentMapper.getCurrentOffset()
byteView = currentMapper.getCurrentByteView()
byte = byteView.readByte(currentPos)

if (byte == 0x00):
	currentMapper.mapStructure(multiByteID)
	debugLog(&quot;Multi Byte ID mapped at offset &quot; + str(currentPos))
else:
	currentMapper.mapStructure(singleByteID)
	debugLog(&quot;Single Byte ID mapped at offset &quot; + str(currentPos))
                    </source>
                </script>
            </scriptelement>
        </structure>
        <structure name="Voice Program" id="21" length="52" repeatmin="100" repeatmax="100" encoding="ANSI_X3.4-1968" endian="big" signed="no">
            <structure name="Oscillator" id="22" length="8" alignment="0" fillcolor="688473">
                <custom name="VCO Octave (E00)" id="23" script="id:336"/>
                <custom name="VCO Waveform (E01)" id="24" script="id:337"/>
                <custom name="VCO Pulse Width (E02)" id="25" script="id:327"/>
                <custom name="VCO Pulse Width Mod Speed (E03)" id="26" script="id:327"/>
                <custom name="VCO Envelope Generator (E04)" id="27" script="id:327"/>
                <custom name="Noise (E05)" id="28" script="id:327"/>
                <custom name="Sampler (E06)" id="29" script="id:327"/>
                <custom name="Balance (E07)" id="30" script="id:327"/>
            </structure>
            <structure name="Filter" id="32" length="7" alignment="0" fillcolor="879E81">
                <custom name="VCF Frequency (E10)" id="33" script="id:327"/>
                <custom name="VCF Resonance (E11)" id="34" script="id:327"/>
                <custom name="VCF Osc Mod (E12)" id="35" script="id:327"/>
                <custom name="VCF Envelope Polarity (E13)" id="36" script="id:340"/>
                <custom name="VCF Key Follow (E14)" id="37" script="id:327"/>
                <custom name="VCF Velocity (E15)" id="38" script="id:327"/>
                <custom name="High Pass Filter (E16)" id="39" script="id:327"/>
            </structure>
            <structure name="Envelope" id="41" length="9" alignment="0" fillcolor="B9C6A7">
                <custom name="Envelope Mode (E20)" id="42" script="id:327"/>
                <custom name="EGA Attack (E21)" id="43" script="id:327"/>
                <custom name="EGA Decay (E22)" id="44" script="id:327"/>
                <custom name="EGA Sustain (E23)" id="45" script="id:327"/>
                <custom name="EGA Release (E24)" id="46" script="id:327"/>
                <custom name="EGO Attack (E25)" id="47" script="id:327"/>
                <custom name="EGO Decay (E26)" id="48" script="id:327"/>
                <custom name="EGO Sustain (E27)" id="49" script="id:327"/>
                <custom name="EGO Release (E28)" id="50" script="id:327"/>
            </structure>
            <structure name="Attenuator" id="52" length="2" alignment="0" fillcolor="E4E4CB">
                <custom name="VCA Level (E30)" id="53" script="id:327"/>
                <custom name="VCA Velocity (E31)" id="54" script="id:327"/>
            </structure>
            <structure name="Low Frequency Oscillator" id="56" length="5" alignment="0" fillcolor="F2F3F2">
                <custom name="LFO Select (E40)" id="57" script="id:327"/>
                <custom name="LFO Waveform (E41)" id="58" script="id:327"/>
                <custom name="LFO Frequency (E42)" id="59" script="id:327"/>
                <custom name="LFO Depth (E43)" id="60" script="id:327"/>
                <custom name="LFO Delay (E44)" id="61" script="id:327"/>
            </structure>
            <structure name="Misc" id="63" length="9" alignment="0">
                <custom name="Chorus (E45)" id="64" script="id:327"/>
                <custom name="Voice Assign (E50)" id="65" script="id:327"/>
                <custom name="Portamento (E51)" id="66" script="id:327"/>
                <custom name="Voice Detune (E52)" id="67" script="id:327"/>
                <custom name="Wheel Bend VCO (E60)" id="68" script="id:327"/>
                <custom name="Wheel Bend VCF (E61)" id="69" script="id:327"/>
                <custom name="Wheel Mod (E62)" id="70" script="id:327"/>
                <custom name="MIDI Split (E70)" id="71" script="id:327"/>
                <custom name="MIDI Split Point (E71)" id="72" script="id:327"/>
            </structure>
            <string name="Label (E80)" id="74" fillcolor="EC8140" type="fixed-length" length="12"/>
        </structure>
        <structure name="Device ID" id="76" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <number name="Device" id="77" type="integer" length="1" display="hex">
                <fixedvalues>
                    <fixedvalue name="all devices" value="0x7F"/>
                </fixedvalues>
            </number>
        </structure>
        <structure name="Product ID" id="79" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <number name="Product" id="80" type="integer" length="1" display="hex"/>
        </structure>
        <structure name="Voice Program Data" id="82" length="0" alignment="0" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <structref name="Voice Program" id="83" repeatmax="100" structure="id:21"/>
        </structure>
        <structure name="End of System Exclusive" id="85" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <number name="Byte" mustmatch="yes" id="86" type="integer" length="1" display="hex">
                <fixedvalues>
                    <fixedvalue name="EOX" value="0xF7"/>
                </fixedvalues>
            </number>
        </structure>
        <structure name="Chunk" id="88" repeatmax="-1" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <structref name="Start of System Exclusive" id="89" structure="id:7"/>
            <structref name="Identification Code" id="90" structure="id:18"/>
            <structref name="Device ID" id="91" structure="id:76"/>
            <structref name="Product ID" id="92" structure="id:79"/>
            <structref name="Voice Program Data" id="93" structure="id:82"/>
            <structref name="End of System Exclusive" id="94" structure="id:85"/>
        </structure>
        <structure name="MIDI System Exclusive" id="6" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <structref name="Chunk" id="96" repeatmax="-1" structure="id:88"/>
        </structure>
    </grammar>
</ufwb>
